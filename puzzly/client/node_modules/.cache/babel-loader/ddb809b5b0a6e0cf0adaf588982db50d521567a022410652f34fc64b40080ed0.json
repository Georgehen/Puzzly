{"ast":null,"code":"var _jsxFileName = \"/home/tor/puzzli/puzzly/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('e4Guardian');\n  const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n\n  const generate = async () => {\n    try {\n      const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&pgnInJson=true&perfType=blitz,rapid,classical`, {\n        headers: {\n          'Accept': 'application/x-ndjson'\n        }\n      });\n      console.log('response: ', response);\n      const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n      console.log(\"games: \", games);\n      const blunders = findBlunders(games, username);\n      console.log(blunders);\n      setBlunderPositions(blunders);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n  function findBlunders(games, username) {\n    let blunderFENs = [];\n    games.forEach(game => {\n      console.log(\"game: \", game);\n      console.log(game.pgn);\n\n      // Determine which color the user is playing\n      const moves = game.moves;\n      const players = game.players;\n      const userColor = players.white.user.name === username ? 'white' : 'black';\n      const analysis = game.analysis;\n      const moveList = moves.split(' ');\n      console.log(moveList);\n      const chess = new Chess();\n      let idx = 0;\n\n      // Process each move\n      moveList.forEach(move => {\n        // Make the move on the board\n        console.log(moveList[idx]);\n        console.log(chess.fen());\n        console.log(chess.ascii());\n\n        // Check if the current move is a blunder by the user\n        if (analysis[idx] && analysis[idx].judgment && analysis[idx].judgment.name === 'Blunder') {\n          const currentPlayer = idx % 2 === 0 ? 'white' : 'black';\n\n          // Check if the blunder was made by the user\n          if (currentPlayer === userColor) {\n            // Undo the blunder move to get the position before the move\n            // Add the FEN of the position before the blunder\n            blunderFENs.push(chess.fen());\n          }\n        }\n        chess.move(move);\n        idx++;\n      });\n    });\n    console.log(blunderFENs);\n    return blunderFENs;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"hero is-fullheight\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-head\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(UserInput, {\n            username: username,\n            setUsername: setUsername,\n            generate: generate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"has-text-centered\",\n            children: \"Enter your Lichess username to generate your tactics based on blunders.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), blunderPositions.map((fen, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `https://lichess.org/analysis/fromPosition/${encodeURIComponent(fen)}`,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: [\"Analyze FEN before blunder \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"SyJXFZwnblU0edbgqqw5GIqGv+o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Chess","Navbar","UserInput","jsxDEV","_jsxDEV","App","_s","username","setUsername","blunderPositions","setBlunderPositions","generate","response","get","headers","console","log","games","data","split","filter","x","map","JSON","parse","blunders","findBlunders","error","blunderFENs","forEach","game","pgn","moves","players","userColor","white","user","name","analysis","moveList","chess","idx","move","fen","ascii","judgment","currentPlayer","push","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","index","href","encodeURIComponent","target","rel","_c","$RefreshReg$"],"sources":["/home/tor/puzzli/puzzly/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\n\nfunction App() {\n    const [username, setUsername] = useState('e4Guardian');\n    const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n\n    const generate = async () => {\n        try {\n            const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&pgnInJson=true&perfType=blitz,rapid,classical`, {\n                headers: { 'Accept': 'application/x-ndjson' }\n            });\n          console.log('response: ', response);\n            const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n          console.log(\"games: \", games);\n            const blunders = findBlunders(games, username);\n            console.log(blunders);\n            setBlunderPositions(blunders);\n        } catch (error) {\n            console.error('Error fetching games:', error);\n        }\n    };\n\n    function findBlunders(games, username) {\n      let blunderFENs = [];\n\n      games.forEach((game) => {\n        console.log(\"game: \", game);\n        console.log(game.pgn);\n\n        // Determine which color the user is playing\n        const moves = game.moves;\n        const players = game.players;\n        const userColor = players.white.user.name === username ? 'white' : 'black';\n        const analysis = game.analysis;\n        const moveList = moves.split(' ');\n        console.log(moveList);\n        const chess = new Chess();\n\n        let idx = 0;\n\n\n        // Process each move\n        moveList.forEach((move) => {\n          // Make the move on the board\n          console.log(moveList[idx]);\n          console.log(chess.fen());\n          console.log(chess.ascii());\n\n          // Check if the current move is a blunder by the user\n          if (analysis[idx] && analysis[idx].judgment && analysis[idx].judgment.name === 'Blunder') {\n            const currentPlayer = idx % 2 === 0 ? 'white' : 'black';\n\n            // Check if the blunder was made by the user\n            if (currentPlayer === userColor) {\n\n              // Undo the blunder move to get the position before the move\n              // Add the FEN of the position before the blunder\n              blunderFENs.push(chess.fen());\n            }\n          }\n          chess.move(move);\n          idx++;\n        });\n      });\n\n      console.log(blunderFENs);\n      return blunderFENs;\n    }\n\n\n\n    return (\n        <div id=\"app\">\n            <section className=\"hero is-fullheight\">\n                <div className=\"hero-head\">\n                    <Navbar />\n                </div>\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <UserInput\n                            username={username}\n                            setUsername={setUsername}\n                            generate={generate}\n                        />\n                        <div className=\"has-text-centered\">\n                            Enter your Lichess username to generate your tactics based on blunders.\n                        </div>\n                        <br />\n                        {blunderPositions.map((fen, index) => (\n                            <div key={index}>\n                                <a href={`https://lichess.org/analysis/fromPosition/${encodeURIComponent(fen)}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    Analyze FEN before blunder {index + 1}\n                                </a>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,YAAY,CAAC;EACtD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9D,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,sCAAqCN,QAAS,2FAA0F,EAAE;QACxKO,OAAO,EAAE;UAAE,QAAQ,EAAE;QAAuB;MAChD,CAAC,CAAC;MACJC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAAC;MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}