{"ast":null,"code":"var _jsxFileName = \"/home/tor/puzzli/puzzly/src/components/ChessPuzzle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chess from 'chess.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessPuzzle = ({\n  fenList\n}) => {\n  _s();\n  const [currentFEN, setCurrentFEN] = useState(fenList[0]);\n  const [game, setGame] = useState(new Chess());\n  const [puzzleIndex, setPuzzleIndex] = useState(0);\n  useEffect(() => {\n    game.load(currentFEN);\n  }, [currentFEN, game]);\n  const handleMove = move => {\n    const moveResult = game.move(move);\n    if (moveResult === null) return false; // illegal move\n\n    const bestMove = getBestMoveFromStockfish(); // You'll need to implement this function\n\n    // Check if the user's move is the best move\n    if (move === bestMove) {\n      // Move to the next puzzle if there is one\n      if (puzzleIndex < fenList.length - 1) {\n        setPuzzleIndex(puzzleIndex + 1);\n        setCurrentFEN(fenList[puzzleIndex + 1]);\n      } else {\n        alert('Congratulations! You have completed all puzzles.');\n      }\n    } else {\n      alert('Try again or find the best move!');\n    }\n    return true; // move was legal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      position: currentFEN,\n      onDrop: ({\n        sourceSquare,\n        targetSquare,\n        piece\n      }) => {\n        const move = game.move({\n          from: sourceSquare,\n          to: targetSquare,\n          promotion: 'q' // automatically promote to a queen for simplicity\n        });\n        return move ? handleMove(move.san) : null;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Puzzle \", puzzleIndex + 1, \" of \", fenList.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessPuzzle, \"bkeT3/3YvT4iDzkIl2oOgffSNVE=\");\n_c = ChessPuzzle;\nexport default ChessPuzzle;\nvar _c;\n$RefreshReg$(_c, \"ChessPuzzle\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessPuzzle","fenList","_s","currentFEN","setCurrentFEN","game","setGame","puzzleIndex","setPuzzleIndex","load","handleMove","move","moveResult","bestMove","getBestMoveFromStockfish","length","alert","children","position","onDrop","sourceSquare","targetSquare","piece","from","to","promotion","san","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tor/puzzli/puzzly/src/components/ChessPuzzle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chess from 'chess.js';\n\nconst ChessPuzzle = ({ fenList }) => {\n  const [currentFEN, setCurrentFEN] = useState(fenList[0]);\n  const [game, setGame] = useState(new Chess());\n  const [puzzleIndex, setPuzzleIndex] = useState(0);\n\n  useEffect(() => {\n    game.load(currentFEN);\n  }, [currentFEN, game]);\n\n  const handleMove = (move) => {\n    const moveResult = game.move(move);\n    if (moveResult === null) return false; // illegal move\n\n    const bestMove = getBestMoveFromStockfish(); // You'll need to implement this function\n\n    // Check if the user's move is the best move\n    if (move === bestMove) {\n      // Move to the next puzzle if there is one\n      if (puzzleIndex < fenList.length - 1) {\n        setPuzzleIndex(puzzleIndex + 1);\n        setCurrentFEN(fenList[puzzleIndex + 1]);\n      } else {\n        alert('Congratulations! You have completed all puzzles.');\n      }\n    } else {\n      alert('Try again or find the best move!');\n    }\n\n    return true; // move was legal\n  };\n\n  return (\n    <div>\n      <Chessboard\n        position={currentFEN}\n        onDrop={({ sourceSquare, targetSquare, piece }) => {\n          const move = game.move({\n            from: sourceSquare,\n            to: targetSquare,\n            promotion: 'q' // automatically promote to a queen for simplicity\n          });\n\n          return move ? handleMove(move.san) : null;\n        }}\n      />\n      <div>\n        Puzzle {puzzleIndex + 1} of {fenList.length}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessPuzzle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,KAAK,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAIG,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACdU,IAAI,CAACI,IAAI,CAACN,UAAU,CAAC;EACvB,CAAC,EAAE,CAACA,UAAU,EAAEE,IAAI,CAAC,CAAC;EAEtB,MAAMK,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,UAAU,GAAGP,IAAI,CAACM,IAAI,CAACA,IAAI,CAAC;IAClC,IAAIC,UAAU,KAAK,IAAI,EAAE,OAAO,KAAK,CAAC,CAAC;;IAEvC,MAAMC,QAAQ,GAAGC,wBAAwB,CAAC,CAAC,CAAC,CAAC;;IAE7C;IACA,IAAIH,IAAI,KAAKE,QAAQ,EAAE;MACrB;MACA,IAAIN,WAAW,GAAGN,OAAO,CAACc,MAAM,GAAG,CAAC,EAAE;QACpCP,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;QAC/BH,aAAa,CAACH,OAAO,CAACM,WAAW,GAAG,CAAC,CAAC,CAAC;MACzC,CAAC,MAAM;QACLS,KAAK,CAAC,kDAAkD,CAAC;MAC3D;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,kCAAkC,CAAC;IAC3C;IAEA,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EAED,oBACEjB,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACH,UAAU;MACTsB,QAAQ,EAAEf,UAAW;MACrBgB,MAAM,EAAEA,CAAC;QAAEC,YAAY;QAAEC,YAAY;QAAEC;MAAM,CAAC,KAAK;QACjD,MAAMX,IAAI,GAAGN,IAAI,CAACM,IAAI,CAAC;UACrBY,IAAI,EAAEH,YAAY;UAClBI,EAAE,EAAEH,YAAY;UAChBI,SAAS,EAAE,GAAG,CAAC;QACjB,CAAC,CAAC;QAEF,OAAOd,IAAI,GAAGD,UAAU,CAACC,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI;MAC3C;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF/B,OAAA;MAAAkB,QAAA,GAAK,SACI,EAACV,WAAW,GAAG,CAAC,EAAC,MAAI,EAACN,OAAO,CAACc,MAAM;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAlDIF,WAAW;AAAA+B,EAAA,GAAX/B,WAAW;AAoDjB,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}