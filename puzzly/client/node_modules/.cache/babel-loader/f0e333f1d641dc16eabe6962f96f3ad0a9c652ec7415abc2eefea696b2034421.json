{"ast":null,"code":"var _jsxFileName = \"/home/tor/puzzli/puzzly/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('e4Guardian');\n  const [tactics, setTactics] = useState([]);\n  const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n  const [shortVariation, setShortVariation] = useState(false);\n  const generate = async () => {\n    try {\n      const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n        headers: {\n          'Accept': 'application/x-ndjson'\n        }\n      });\n      console.log('response: ', response);\n      const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n      console.log(\"games: \", games);\n      const blunders = findBlunders(games, username);\n      const {\n        newTactics,\n        newPositions\n      } = generateTactics(blunders);\n      setTactics(newTactics);\n      setBlunderPositions(newPositions); // Update the blunder positions state\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n\n  // const findBlunders = (games) => {\n  //     let blunders = [];\n  //     games.forEach(game => {\n  //         game.analysis.forEach((move, index) => {\n  //             if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n  //                 const prevMove = game.analysis[index - 1];\n  //                 if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n  //                     blunders.push({\n  //                         game: game,\n  //                         index: index - 1,\n  //                         eval: move.eval,\n  //                         variation: move.variation\n  //                     });\n  //                 }\n  //             }\n  //         });\n  //     });\n  //     return blunders;\n  // };\n\n  function findBlunders(games, username) {\n    let blunderFENs = [];\n    games.forEach((game, index) => {\n      console.log(\"game: \", game);\n\n      // Determine which color the user is playing\n      const moves = game.moves;\n      const players = game.players;\n      const userColor = players.white.user.name === username ? 'white' : 'black';\n      const analysis = game.analysis;\n      const moveList = moves.split(' ');\n      console.log(moveList);\n      const chess = new Chess();\n\n      // Process each move\n      moveList.forEach((move, index) => {\n        // Make the move on the board\n        console.log(chess.fen());\n        chess.move(move);\n\n        // Check if the current move is a blunder by the user\n        if (analysis[index] && analysis[index].judgment && analysis[index].judgment.name === 'Blunder') {\n          const currentPlayer = index % 2 === 0 ? 'white' : 'black';\n\n          // Check if the blunder was made by the user\n          if (currentPlayer === userColor) {\n            // Undo the blunder move to get the position before the move\n            chess.undo();\n            // Add the FEN of the position before the blunder\n            blunderFENs.push(chess.fen());\n          }\n        }\n      });\n    });\n    return blunderFENs;\n  }\n  const generateTactics = blunders => {\n    const tactics = [];\n    const positions = [];\n    blunders.forEach((blunder, index) => {\n      const game = new Chess();\n      const moves = blunder.game.moves.split(' ');\n\n      // Simulate moves up to just before the blunder\n      moves.slice(0, blunder.index).forEach(move => game.move(move));\n      const fenBeforeBlunder = game.fen(); // Capture the FEN before the blunder\n      positions.push(fenBeforeBlunder); // Save the FEN\n\n      // Continue to simulate to include the blunder move\n      game.move(moves[blunder.index]);\n      let fen = game.fen();\n      let variation = blunder.variation.split(' ');\n      variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n      if (shortVariation && !blunder.eval.includes('mate')) {\n        variation = variation.slice(0, 6);\n      }\n      const newGame = new Chess(fen);\n      variation.forEach(move => {\n        if (newGame.move(move) === null) {\n          console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n        }\n      });\n      addHeaders(newGame, blunder, index, '1-0', blunder.eval);\n      tactics.push(newGame.pgn());\n    });\n    return {\n      newTactics: tactics,\n      newPositions: positions\n    };\n  };\n  function addHeaders(game, blunder, index, result, termination) {\n    game.header('Event', 'Blunder Analysis');\n    game.header('Site', 'Internal');\n    game.header('Date', new Date().toISOString().slice(0, 10));\n    game.header('Round', index + 1);\n    game.header('White', blunder.game.white);\n    game.header('Black', blunder.game.black);\n    game.header('Result', result);\n    game.header('Termination', termination);\n    game.header('Annotator', 'Blunder Analysis Tool');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"hero is-fullheight\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-head\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(UserInput, {\n            username: username,\n            setUsername: setUsername,\n            generate: generate,\n            shortVariation: shortVariation,\n            setShortVariation: setShortVariation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"has-text-centered\",\n            children: \"Enter your Lichess username to generate your tactics based on blunders.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TacticDisplay, {\n            tactics: tactics\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this), blunderPositions.map((fen, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"FEN before blunder: \", fen]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"6ARfKlVzm5xxHP/BUQz2YvntNjE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Chess","Navbar","UserInput","TacticDisplay","jsxDEV","_jsxDEV","App","_s","username","setUsername","tactics","setTactics","blunderPositions","setBlunderPositions","shortVariation","setShortVariation","generate","response","get","headers","console","log","games","data","split","filter","x","map","JSON","parse","blunders","findBlunders","newTactics","newPositions","generateTactics","error","blunderFENs","forEach","game","index","moves","players","userColor","white","user","name","analysis","moveList","chess","move","fen","judgment","currentPlayer","undo","push","positions","blunder","slice","fenBeforeBlunder","variation","unshift","eval","includes","newGame","join","addHeaders","pgn","result","termination","header","Date","toISOString","black","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tor/puzzli/puzzly/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\n\nfunction App() {\n    const [username, setUsername] = useState('e4Guardian');\n    const [tactics, setTactics] = useState([]);\n    const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n    const [shortVariation, setShortVariation] = useState(false);\n\n    const generate = async () => {\n        try {\n            const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n                headers: { 'Accept': 'application/x-ndjson' }\n            });\n          console.log('response: ', response);\n            const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n          console.log(\"games: \", games);\n            const blunders = findBlunders(games, username);\n            const { newTactics, newPositions } = generateTactics(blunders);\n            setTactics(newTactics);\n            setBlunderPositions(newPositions); // Update the blunder positions state\n        } catch (error) {\n            console.error('Error fetching games:', error);\n        }\n    };\n\n    // const findBlunders = (games) => {\n    //     let blunders = [];\n    //     games.forEach(game => {\n    //         game.analysis.forEach((move, index) => {\n    //             if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n    //                 const prevMove = game.analysis[index - 1];\n    //                 if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n    //                     blunders.push({\n    //                         game: game,\n    //                         index: index - 1,\n    //                         eval: move.eval,\n    //                         variation: move.variation\n    //                     });\n    //                 }\n    //             }\n    //         });\n    //     });\n    //     return blunders;\n    // };\n\n    function findBlunders(games, username) {\n      let blunderFENs = [];\n\n      games.forEach((game, index) => {\n        console.log(\"game: \", game);\n\n        // Determine which color the user is playing\n        const moves = game.moves;\n        const players = game.players;\n        const userColor = players.white.user.name === username ? 'white' : 'black';\n        const analysis = game.analysis;\n        const moveList = moves.split(' ');\n        console.log(moveList);\n        const chess = new Chess();\n\n\n        // Process each move\n        moveList.forEach((move, index) => {\n          // Make the move on the board\n          console.log(chess.fen());\n          chess.move(move);\n\n          // Check if the current move is a blunder by the user\n          if (analysis[index] && analysis[index].judgment && analysis[index].judgment.name === 'Blunder') {\n            const currentPlayer = index % 2 === 0 ? 'white' : 'black';\n\n            // Check if the blunder was made by the user\n            if (currentPlayer === userColor) {\n\n              // Undo the blunder move to get the position before the move\n              chess.undo();\n              // Add the FEN of the position before the blunder\n              blunderFENs.push(chess.fen());\n            }\n          }\n        });\n      });\n\n      return blunderFENs;\n    }\n\n\n    const generateTactics = (blunders) => {\n        const tactics = [];\n        const positions = [];\n\n        blunders.forEach((blunder, index) => {\n            const game = new Chess();\n            const moves = blunder.game.moves.split(' ');\n\n            // Simulate moves up to just before the blunder\n            moves.slice(0, blunder.index).forEach(move => game.move(move));\n\n            const fenBeforeBlunder = game.fen(); // Capture the FEN before the blunder\n            positions.push(fenBeforeBlunder); // Save the FEN\n\n            // Continue to simulate to include the blunder move\n            game.move(moves[blunder.index]);\n\n            let fen = game.fen();\n            let variation = blunder.variation.split(' ');\n            variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n            if (shortVariation && !blunder.eval.includes('mate')) {\n                variation = variation.slice(0, 6);\n            }\n\n            const newGame = new Chess(fen);\n            variation.forEach(move => {\n                if (newGame.move(move) === null) {\n                    console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n                }\n            });\n\n            addHeaders(newGame, blunder, index, '1-0', blunder.eval);\n            tactics.push(newGame.pgn());\n        });\n\n        return { newTactics: tactics, newPositions: positions };\n    };\n\n    function addHeaders(game, blunder, index, result, termination) {\n        game.header('Event', 'Blunder Analysis');\n        game.header('Site', 'Internal');\n        game.header('Date', new Date().toISOString().slice(0, 10));\n        game.header('Round', index + 1);\n        game.header('White', blunder.game.white);\n        game.header('Black', blunder.game.black);\n        game.header('Result', result);\n        game.header('Termination', termination);\n        game.header('Annotator', 'Blunder Analysis Tool');\n    }\n\n    return (\n        <div id=\"app\">\n            <section className=\"hero is-fullheight\">\n                <div className=\"hero-head\">\n                    <Navbar />\n                </div>\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <UserInput\n                            username={username}\n                            setUsername={setUsername}\n                            generate={generate}\n                            shortVariation={shortVariation}\n                            setShortVariation={setShortVariation}\n                        />\n                        <div className=\"has-text-centered\">\n                            Enter your Lichess username to generate your tactics based on blunders.\n                        </div>\n                        <br />\n                        <TacticDisplay tactics={tactics} />\n                        {/* Optionally display blunder positions */}\n                        {blunderPositions.map((fen, index) => (\n                            <div key={index}>\n                                <p>FEN before blunder: {fen}</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}