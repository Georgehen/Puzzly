{"ast":null,"code":"var _jsxFileName = \"/home/tor/puzzli/puzzly/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('e4Guardian');\n  const [tactics, setTactics] = useState([]);\n  const [shortVariation, setShortVariation] = useState(false);\n  const generate = async () => {\n    try {\n      const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n        headers: {\n          'Accept': 'application/x-ndjson'\n        }\n      });\n      const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n      const blunders = findBlunders(games);\n      const newTactics = generateTactics(blunders);\n      setTactics(newTactics);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n  const findBlunders = games => {\n    let blunders = [];\n    games.forEach(game => {\n      game.analysis.forEach((move, index) => {\n        if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n          const prevMove = game.analysis[index - 1];\n          if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n            blunders.push({\n              game: game,\n              index: index - 1,\n              eval: move.eval,\n              variation: move.variation\n            });\n          }\n        }\n      });\n    });\n    return blunders;\n  };\n  const generateTactics = blunders => {\n    return blunders.map(blunder => {\n      const chess = new Chess();\n      const moves = blunder.game.moves.split(' ');\n      let fen = '';\n\n      // Apply moves up to the blunder index and check each move\n      moves.slice(0, blunder.index + 1).forEach(move => {\n        if (chess.move(move) === null) {\n          console.error(`Invalid move attempted: ${move}`);\n        }\n      });\n      fen = chess.fen();\n      const variation = [moves[blunder.index]].concat(blunder.variation.split(' '));\n      const evalStr = String(blunder.eval);\n      if (shortVariation && !evalStr.includes('mate')) {\n        variation.length = Math.min(variation.length, 6);\n      }\n      const newChess = new Chess(fen);\n      variation.forEach(move => {\n        if (newChess.move(move) === null) {\n          console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n        }\n      });\n      return newChess.pgn();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"hero is-fullheight\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-head\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(UserInput, {\n            username: username,\n            setUsername: setUsername,\n            generate: generate,\n            shortVariation: shortVariation,\n            setShortVariation: setShortVariation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"has-text-centered\",\n            children: \"Enter your Lichess username to generate your tactics based on blunders.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TacticDisplay, {\n            tactics: tactics\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"p6BLkBdKveVBNQy9IjqLe0zBgbI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Chess","Navbar","UserInput","TacticDisplay","jsxDEV","_jsxDEV","App","_s","username","setUsername","tactics","setTactics","shortVariation","setShortVariation","generate","response","get","headers","games","data","split","filter","x","map","JSON","parse","blunders","findBlunders","newTactics","generateTactics","error","console","forEach","game","analysis","move","index","judgment","name","prevMove","push","eval","variation","blunder","chess","moves","fen","slice","concat","evalStr","String","includes","length","Math","min","newChess","join","pgn","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tor/puzzli/puzzly/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\n\nfunction App() {\n    const [username, setUsername] = useState('e4Guardian');\n    const [tactics, setTactics] = useState([]);\n    const [shortVariation, setShortVariation] = useState(false);\n\n    const generate = async () => {\n        try {\n            const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n                headers: { 'Accept': 'application/x-ndjson' }\n            });\n            const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n            const blunders = findBlunders(games);\n            const newTactics = generateTactics(blunders);\n            setTactics(newTactics);\n        } catch (error) {\n            console.error('Error fetching games:', error);\n        }\n    };\n\n    const findBlunders = (games) => {\n        let blunders = [];\n        games.forEach(game => {\n            game.analysis.forEach((move, index) => {\n                if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n                    const prevMove = game.analysis[index - 1];\n                    if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n                        blunders.push({\n                            game: game,\n                            index: index - 1,\n                            eval: move.eval,\n                            variation: move.variation\n                        });\n                    }\n                }\n            });\n        });\n        return blunders;\n    };\n\n    const generateTactics = (blunders) => {\n        return blunders.map(blunder => {\n            const chess = new Chess();\n            const moves = blunder.game.moves.split(' ');\n            let fen = '';\n\n            // Apply moves up to the blunder index and check each move\n            moves.slice(0, blunder.index + 1).forEach(move => {\n                if (chess.move(move) === null) {\n                    console.error(`Invalid move attempted: ${move}`);\n                }\n            });\n\n            fen = chess.fen();\n            const variation = [moves[blunder.index]].concat(blunder.variation.split(' '));\n            const evalStr = String(blunder.eval);\n            if (shortVariation && !evalStr.includes('mate')) {\n                variation.length = Math.min(variation.length, 6);\n            }\n\n            const newChess = new Chess(fen);\n            variation.forEach(move => {\n                if (newChess.move(move) === null) {\n                    console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n                }\n            });\n\n            return newChess.pgn();\n        });\n    };\n\n\n    return (\n        <div id=\"app\">\n            <section className=\"hero is-fullheight\">\n                <div className=\"hero-head\">\n                    <Navbar />\n                </div>\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <UserInput\n                            username={username}\n                            setUsername={setUsername}\n                            generate={generate}\n                            shortVariation={shortVariation}\n                            setShortVariation={setShortVariation}\n                        />\n                        <div className=\"has-text-centered\">\n                            Enter your Lichess username to generate your tactics based on blunders.\n                        </div>\n                        <br />\n                        <TacticDisplay tactics={tactics} />\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}