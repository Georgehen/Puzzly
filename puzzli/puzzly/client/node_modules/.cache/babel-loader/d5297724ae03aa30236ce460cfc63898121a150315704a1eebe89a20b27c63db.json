{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import Chessboard from 'chessboardjsx';\n// import Chess from 'chess.js';\n\n// const ChessPuzzle = ({ fenList }) => {\n//   const [currentFEN, setCurrentFEN] = useState(fenList[0]);\n//   const [game, setGame] = useState(new Chess());\n//   const [puzzleIndex, setPuzzleIndex] = useState(0);\n\n//   useEffect(() => {\n//     game.load(currentFEN);\n//   }, [currentFEN, game]);\n\n//   const handleMove = (move) => {\n//     const moveResult = game.move(move);\n//     if (moveResult === null) return false; // illegal move\n\n//     // const bestMove = getBestMoveFromStockfish(); // You'll need to implement this function\n\n//     // Check if the user's move is the best move\n//     if (move === bestMove) {\n//       // Move to the next puzzle if there is one\n//       if (puzzleIndex < fenList.length - 1) {\n//         setPuzzleIndex(puzzleIndex + 1);\n//         setCurrentFEN(fenList[puzzleIndex + 1]);\n//       } else {\n//         alert('Congratulations! You have completed all puzzles.');\n//       }\n//     } else {\n//       alert('Try again or find the best move!');\n//     }\n\n//     return true; // move was legal\n//   };\n\n//   return (\n//     <div>\n//       <Chessboard\n//         position={currentFEN}\n//         onDrop={({ sourceSquare, targetSquare, piece }) => {\n//           const move = game.move({\n//             from: sourceSquare,\n//             to: targetSquare,\n//             promotion: 'q' // automatically promote to a queen for simplicity\n//           });\n\n//           return move ? handleMove(move.san) : null;\n//         }}\n//       />\n//       <div>\n//         Puzzle {puzzleIndex + 1} of {fenList.length}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChessPuzzle;","map":{"version":3,"names":[],"sources":["/home/tor/puzzli/puzzly/src/components/ChessPuzzle.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Chessboard from 'chessboardjsx';\n// import Chess from 'chess.js';\n\n// const ChessPuzzle = ({ fenList }) => {\n//   const [currentFEN, setCurrentFEN] = useState(fenList[0]);\n//   const [game, setGame] = useState(new Chess());\n//   const [puzzleIndex, setPuzzleIndex] = useState(0);\n\n//   useEffect(() => {\n//     game.load(currentFEN);\n//   }, [currentFEN, game]);\n\n//   const handleMove = (move) => {\n//     const moveResult = game.move(move);\n//     if (moveResult === null) return false; // illegal move\n\n//     // const bestMove = getBestMoveFromStockfish(); // You'll need to implement this function\n\n//     // Check if the user's move is the best move\n//     if (move === bestMove) {\n//       // Move to the next puzzle if there is one\n//       if (puzzleIndex < fenList.length - 1) {\n//         setPuzzleIndex(puzzleIndex + 1);\n//         setCurrentFEN(fenList[puzzleIndex + 1]);\n//       } else {\n//         alert('Congratulations! You have completed all puzzles.');\n//       }\n//     } else {\n//       alert('Try again or find the best move!');\n//     }\n\n//     return true; // move was legal\n//   };\n\n//   return (\n//     <div>\n//       <Chessboard\n//         position={currentFEN}\n//         onDrop={({ sourceSquare, targetSquare, piece }) => {\n//           const move = game.move({\n//             from: sourceSquare,\n//             to: targetSquare,\n//             promotion: 'q' // automatically promote to a queen for simplicity\n//           });\n\n//           return move ? handleMove(move.san) : null;\n//         }}\n//       />\n//       <div>\n//         Puzzle {puzzleIndex + 1} of {fenList.length}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChessPuzzle;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}