{"ast":null,"code":"var _jsxFileName = \"/home/tor/puzzli/puzzly/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('e4Guardian');\n  const [tactics, setTactics] = useState([]);\n  const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n  const [shortVariation, setShortVariation] = useState(false);\n  const generate = async () => {\n    try {\n      const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n        headers: {\n          'Accept': 'application/x-ndjson'\n        }\n      });\n      console.log('response: ', response);\n      const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n      const blunders = findBlunders(games, usernam);\n      const {\n        newTactics,\n        newPositions\n      } = generateTactics(blunders);\n      setTactics(newTactics);\n      setBlunderPositions(newPositions); // Update the blunder positions state\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n  const findBlunders = games => {\n    let blunders = [];\n    games.forEach(game => {\n      game.analysis.forEach((move, index) => {\n        if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n          const prevMove = game.analysis[index - 1];\n          if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n            blunders.push({\n              game: game,\n              index: index - 1,\n              eval: move.eval,\n              variation: move.variation\n            });\n          }\n        }\n      });\n    });\n    return blunders;\n  };\n  const generateTactics = blunders => {\n    const tactics = [];\n    const positions = [];\n    blunders.forEach((blunder, index) => {\n      const game = new Chess();\n      const moves = blunder.game.moves.split(' ');\n\n      // Simulate moves up to just before the blunder\n      moves.slice(0, blunder.index).forEach(move => game.move(move));\n      const fenBeforeBlunder = game.fen(); // Capture the FEN before the blunder\n      positions.push(fenBeforeBlunder); // Save the FEN\n\n      // Continue to simulate to include the blunder move\n      game.move(moves[blunder.index]);\n      let fen = game.fen();\n      let variation = blunder.variation.split(' ');\n      variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n      if (shortVariation && !blunder.eval.includes('mate')) {\n        variation = variation.slice(0, 6);\n      }\n      const newGame = new Chess(fen);\n      variation.forEach(move => {\n        if (newGame.move(move) === null) {\n          console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n        }\n      });\n      addHeaders(newGame, blunder, index, '1-0', blunder.eval);\n      tactics.push(newGame.pgn());\n    });\n    return {\n      newTactics: tactics,\n      newPositions: positions\n    };\n  };\n  function addHeaders(game, blunder, index, result, termination) {\n    game.header('Event', 'Blunder Analysis');\n    game.header('Site', 'Internal');\n    game.header('Date', new Date().toISOString().slice(0, 10));\n    game.header('Round', index + 1);\n    game.header('White', blunder.game.white);\n    game.header('Black', blunder.game.black);\n    game.header('Result', result);\n    game.header('Termination', termination);\n    game.header('Annotator', 'Blunder Analysis Tool');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"hero is-fullheight\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-head\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(UserInput, {\n            username: username,\n            setUsername: setUsername,\n            generate: generate,\n            shortVariation: shortVariation,\n            setShortVariation: setShortVariation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"has-text-centered\",\n            children: \"Enter your Lichess username to generate your tactics based on blunders.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TacticDisplay, {\n            tactics: tactics\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), blunderPositions.map((fen, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"FEN before blunder: \", fen]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"6ARfKlVzm5xxHP/BUQz2YvntNjE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Chess","Navbar","UserInput","TacticDisplay","jsxDEV","_jsxDEV","App","_s","username","setUsername","tactics","setTactics","blunderPositions","setBlunderPositions","shortVariation","setShortVariation","generate","response","get","headers","console","log","games","data","split","filter","x","map","JSON","parse","blunders","findBlunders","usernam","newTactics","newPositions","generateTactics","error","forEach","game","analysis","move","index","judgment","name","prevMove","push","eval","variation","positions","blunder","moves","slice","fenBeforeBlunder","fen","unshift","includes","newGame","join","addHeaders","pgn","result","termination","header","Date","toISOString","white","black","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tor/puzzli/puzzly/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Chess } from 'chess.js';\n// import Navbar from './components/NavBar';\n// import UserInput from './components/UserInput';\n// import TacticDisplay from './components/TacticDisplay';\n\n// function App() {\n//     const [username, setUsername] = useState('e4Guardian');\n//     const [tactics, setTactics] = useState([]);\n//     const [shortVariation, setShortVariation] = useState(false);\n\n//     const generate = async () => {\n//         try {\n//             const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n//                 headers: { 'Accept': 'application/x-ndjson' }\n//             });\n//             const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n//             const blunders = findBlunders(games);\n//             const newTactics = generateTactics(blunders);\n//             setTactics(newTactics);\n//         } catch (error) {\n//             console.error('Error fetching games:', error);\n//         }\n//     };\n\n//     const findBlunders = (games) => {\n//         let blunders = [];\n//         games.forEach(game => {\n//             game.analysis.forEach((move, index) => {\n//                 if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n//                     const prevMove = game.analysis[index - 1];\n//                     if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n//                         blunders.push({\n//                             game: game,\n//                             index: index - 1,\n//                             eval: move.eval,\n//                             variation: move.variation\n//                         });\n//                     }\n//                 }\n//             });\n//         });\n//         return blunders;\n//     };\n\n//     const generateTactics = (blunders, shortVariation) => {\n//         const tactics = [];\n\n//         blunders.forEach((blunder, index) => {\n//             const game = new Chess();\n//             const moves = blunder.game.moves.split(' ');\n//             let result = '1-0'; // Default result\n//             let termination = '0'; // Default termination, could be 'mate' or eval\n\n//             // Simulate moves up to the blunder\n//             for (let i = 0; i <= blunder.index; i++) {\n//                 const move = moves[i];\n//                 if (i === blunder.index) {\n//                     // Determine game result based on blunder move's player\n//                     termination = blunder.game.analysis[i].eval || `mate:${blunder.game.analysis[i].mate}`;\n//                     termination = (typeof termination === \"undefined\" ? 'mate:'+blunder.game.analysis[i].mate : termination.toString());\n//                     if ((i + 1) % 2 !== 0) { // The blunder move was made by white, so black wins\n//                         result = '0-1';\n//                     }\n//                     break;\n//                 }\n//                 game.move(move);\n//             }\n\n//             let fen = game.fen();\n//             let variation = blunder.variation.split(' ');\n//             variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n//             if (shortVariation && !termination.includes('mate')) {\n//                 variation = variation.slice(0, 6);\n//             }\n\n//             // Setup a new game from the position of the blunder and play the variation\n//             const newGame = new Chess(fen);\n//             variation.forEach(move => {\n//                 if (newGame.move(move) === null) {\n//                     console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n//                 }\n//             });\n\n//             // Add headers and finalize the PGN\n//             addHeaders(newGame, blunder, index, result, termination);\n//             tactics.push(newGame.pgn());\n//         });\n\n//         return tactics;\n//     };\n\n//     function addHeaders(game, blunder, index, result, termination) {\n//         game.header('Event', 'Blunder Analysis');\n//         game.header('Site', 'Internal');\n//         game.header('Date', new Date().toISOString().slice(0, 10));\n//         game.header('Round', index + 1);\n//         game.header('White', blunder.game.white);\n//         game.header('Black', blunder.game.black);\n//         game.header('Result', result);\n//         game.header('Termination', termination);\n//         game.header('Annotator', 'Blunder Analysis Tool');\n//     }\n\n\n//     return (\n//         <div id=\"app\">\n//             <section className=\"hero is-fullheight\">\n//                 <div className=\"hero-head\">\n//                     <Navbar />\n//                 </div>\n//                 <div className=\"hero-body\">\n//                     <div className=\"container\">\n//                         <UserInput\n//                             username={username}\n//                             setUsername={setUsername}\n//                             generate={generate}\n//                             shortVariation={shortVariation}\n//                             setShortVariation={setShortVariation}\n//                         />\n//                         <div className=\"has-text-centered\">\n//                             Enter your Lichess username to generate your tactics based on blunders.\n//                         </div>\n//                         <br />\n//                         <TacticDisplay tactics={tactics} />\n//                     </div>\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js';\nimport Navbar from './components/NavBar';\nimport UserInput from './components/UserInput';\nimport TacticDisplay from './components/TacticDisplay';\n\nfunction App() {\n    const [username, setUsername] = useState('e4Guardian');\n    const [tactics, setTactics] = useState([]);\n    const [blunderPositions, setBlunderPositions] = useState([]); // To store FENs\n    const [shortVariation, setShortVariation] = useState(false);\n\n    const generate = async () => {\n        try {\n            const response = await axios.get(`https://lichess.org/api/games/user/${username}?max=50&analysed=true&evals=true&moves=true&perfType=blitz,rapid,classical`, {\n                headers: { 'Accept': 'application/x-ndjson' }\n            });\n          console.log('response: ', response);\n            const games = response.data.split('\\n').filter(x => x).map(x => JSON.parse(x));\n            const blunders = findBlunders(games, usernam);\n            const { newTactics, newPositions } = generateTactics(blunders);\n            setTactics(newTactics);\n            setBlunderPositions(newPositions); // Update the blunder positions state\n        } catch (error) {\n            console.error('Error fetching games:', error);\n        }\n    };\n\n    const findBlunders = (games) => {\n        let blunders = [];\n        games.forEach(game => {\n            game.analysis.forEach((move, index) => {\n                if (move.judgment && move.judgment.name === 'Blunder' && index > 0) {\n                    const prevMove = game.analysis[index - 1];\n                    if (prevMove.judgment && prevMove.judgment.name === 'Blunder') {\n                        blunders.push({\n                            game: game,\n                            index: index - 1,\n                            eval: move.eval,\n                            variation: move.variation\n                        });\n                    }\n                }\n            });\n        });\n        return blunders;\n    };\n\n    const generateTactics = (blunders) => {\n        const tactics = [];\n        const positions = [];\n\n        blunders.forEach((blunder, index) => {\n            const game = new Chess();\n            const moves = blunder.game.moves.split(' ');\n\n            // Simulate moves up to just before the blunder\n            moves.slice(0, blunder.index).forEach(move => game.move(move));\n\n            const fenBeforeBlunder = game.fen(); // Capture the FEN before the blunder\n            positions.push(fenBeforeBlunder); // Save the FEN\n\n            // Continue to simulate to include the blunder move\n            game.move(moves[blunder.index]);\n\n            let fen = game.fen();\n            let variation = blunder.variation.split(' ');\n            variation.unshift(moves[blunder.index]); // Prepend blunder move to the variation\n\n            if (shortVariation && !blunder.eval.includes('mate')) {\n                variation = variation.slice(0, 6);\n            }\n\n            const newGame = new Chess(fen);\n            variation.forEach(move => {\n                if (newGame.move(move) === null) {\n                    console.error(`Invalid variation move attempted: ${move} in variation ${variation.join(' ')}`);\n                }\n            });\n\n            addHeaders(newGame, blunder, index, '1-0', blunder.eval);\n            tactics.push(newGame.pgn());\n        });\n\n        return { newTactics: tactics, newPositions: positions };\n    };\n\n    function addHeaders(game, blunder, index, result, termination) {\n        game.header('Event', 'Blunder Analysis');\n        game.header('Site', 'Internal');\n        game.header('Date', new Date().toISOString().slice(0, 10));\n        game.header('Round', index + 1);\n        game.header('White', blunder.game.white);\n        game.header('Black', blunder.game.black);\n        game.header('Result', result);\n        game.header('Termination', termination);\n        game.header('Annotator', 'Blunder Analysis Tool');\n    }\n\n    return (\n        <div id=\"app\">\n            <section className=\"hero is-fullheight\">\n                <div className=\"hero-head\">\n                    <Navbar />\n                </div>\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <UserInput\n                            username={username}\n                            setUsername={setUsername}\n                            generate={generate}\n                            shortVariation={shortVariation}\n                            setShortVariation={setShortVariation}\n                        />\n                        <div className=\"has-text-centered\">\n                            Enter your Lichess username to generate your tactics based on blunders.\n                        </div>\n                        <br />\n                        <TacticDisplay tactics={tactics} />\n                        {/* Optionally display blunder positions */}\n                        {blunderPositions.map((fen, index) => (\n                            <div key={index}>\n                                <p>FEN before blunder: {fen}</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}